template: true
valuesFilePath: ../values/gitRepoValues.yml

resources:
  - name: S_DockerPush_5849_012_GitRepo
    type: GitRepo
    configuration:
      gitProvider: s_gitHub
      path: {{ .Values.GitHub.Org_test_Automation_bash.path }}
      branches:
        include: {{gitBranch}}

  - name: S_DockerPush_5849_012_BuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: s_artifactory

pipelines:
  - name: pipeline_S_DockerPush_5849_012
    configuration:
      environmentVariables:
        readOnly:
          JFROG_CLI_BUILD_NUMBER: ${run_id}
    steps:
      - name: S_DockerPush_5849_012_1
        type: DockerBuild
        configuration:
          affinityGroup: S_DockerPush_5849_012
          dockerImageName: ${artifactory_registry_url}/test-automation-docker-local/s_dockerpush_5849
          dockerImageTag: ${run_id}
          inputResources:
            - name: S_DockerPush_5849_012_GitRepo
          integrations:
            - name: s_artifactory
        execution:
          onStart:
            - artifactory_registry_url=$(echo "$int_s_artifactory_url" | sed 's#.*//\([^/]*\)/.*#\1#')
            - cd $res_S_DockerPush_5849_012_GitRepo_resourcePath
            - echo "FROM hello-world" > Dockerfile
      - name: S_DockerPush_5849_012_2
        type: DockerPush
        configuration:
          affinityGroup: S_DockerPush_5849_012
          targetRepository: test-automation-docker-local
          autoPublishBuildInfo: true
          inputSteps:
            - name: S_DockerPush_5849_012_1
          outputResources:
            - name: S_DockerPush_5849_012_BuildInfo
          integrations:
            - name: s_artifactory
      - name: S_DockerPush_5849_012_3
        type: Bash
        configuration:
          inputSteps:
            - name: S_DockerPush_5849_012_2
          integrations:
            - name: s_artifactory
        execution:
          onExecute:
            - buildInfoFilePath=$(jfrog rt search "*/${JFROG_CLI_BUILD_NAME}/${run_id}*.json" | jq -r '.[0].path')
            - buildInfoFileData=$(jfrog rt curl -XGET /api/storage/${buildInfoFilePath})
            - artifactSha=$(echo $buildInfoFileData | jq -r '.checksums.sha256')
            - if [ -z "${project_key}" ]; then project="default"; else project="${project_key}"; fi
            - artifactPath="${project}/${JFROG_CLI_BUILD_NAME}/${run_id}"
            - "stepArtifact=$(curl -sS -H \"Authorization: apiToken $builder_api_token\" -H 'Content-Type: application/json' \"${pipelines_api_url}/stepArtifacts?artifactPath=${artifactPath}&artifactSha=${artifactSha}&artifactType=buildInfo\")"
            - jfrog rt curl -XDELETE "/api/build/${JFROG_CLI_BUILD_NAME}?buildNumbers=${run_id}&artifacts=1"
            - stepArtifactSha=$(echo $stepArtifact | jq -r '.artifactSha')
            - if [ "$stepArtifactSha" != "$artifactSha" ]; then return 1; fi
